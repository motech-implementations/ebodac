package org.motechproject.ebodac.web;

import org.motechproject.ebodac.domain.EbodacEntity;
import org.motechproject.ebodac.domain.EbodacEntityField;
import org.motechproject.mds.dto.EntityDto;
import org.motechproject.mds.dto.FieldDto;
import org.motechproject.mds.dto.MetadataDto;
import org.motechproject.mds.service.EntityService;
import org.motechproject.mds.util.Constants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class EbodacEntityController {
    private static final Logger LOGGER = LoggerFactory.getLogger(EbodacEntityController.class);

    private static final String EBODAC_MODULE = "EBODAC Module";
    private static final List<String> EMAIL_REPORT_HIDDEN_ENTITIES = new ArrayList<>(Arrays.asList("ReportVaccinationAbstract",
            "EmailReport", "EmailRecipient", "EbodacEntity", "EbodacEntityField"));

    @Autowired
    private EntityService entityService;

    @PreAuthorize("hasRole('manageEbodac')")
    @RequestMapping(value = "/getEbodacEntities", method = RequestMethod.GET)
    @ResponseBody
    public Map<String, EbodacEntity> getEbodacEntities() {
        Map<String, EbodacEntity> ebodacEntityMap = new HashMap<>();
        Map<String, List<FieldDto>> relationFields = new HashMap<>();

        List<EntityDto> entities = entityService.listEntities(true);

        for (EntityDto entity : entities) {
            if (EBODAC_MODULE.equals(entity.getModule()) && !EMAIL_REPORT_HIDDEN_ENTITIES.contains(entity.getName())) {
                EbodacEntity ebodacEntity = new EbodacEntity(entity.getId(), entity.getName(), entity.getClassName());

                for (FieldDto fieldDto : entityService.getEntityFields(entity.getId())) {
                    if (!fieldDto.getType().isRelationship()) {
                        if (!isNonDisplayable(fieldDto)) {
                            ebodacEntity.getFields().add(new EbodacEntityField(fieldDto.getId(), fieldDto.getBasic().getName(), fieldDto.getBasic().getDisplayName()));
                        }
                    } else if ("org.motechproject.mds.domain.ManyToOneRelationship".equals(fieldDto.getType().getTypeClass()) ||
                            "org.motechproject.mds.domain.OneToOneRelationship".equals(fieldDto.getType().getTypeClass())) {
                        if (relationFields.containsKey(entity.getClassName())) {
                            relationFields.get(entity.getClassName()).add(fieldDto);
                        } else {
                            relationFields.put(entity.getClassName(), new ArrayList<>(Collections.singletonList(fieldDto)));
                        }
                    }
                }

                ebodacEntityMap.put(entity.getClassName(), ebodacEntity);
            }
        }

        addRelationFields(ebodacEntityMap, relationFields);

        return ebodacEntityMap;
    }

    @ExceptionHandler
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    @ResponseBody
    public String handleException(Exception e) {
        LOGGER.error(e.getMessage(), e);
        return e.getMessage();
    }

    private boolean isNonDisplayable(FieldDto field) {
        if (field.isNonDisplayable()) {
            return true;
        }

        if (Constants.Util.CREATION_DATE_FIELD_NAME.equals(field.getBasic().getName()) || Constants.Util.MODIFICATION_DATE_FIELD_NAME.equals(field.getBasic().getName())) {
            return false;
        }

        MetadataDto autoGenerated = field.getMetadata(Constants.Util.AUTO_GENERATED);
        if (null == autoGenerated) {
            autoGenerated = field.getMetadata(Constants.Util.AUTO_GENERATED_EDITABLE);
        }

        return null != autoGenerated && Constants.Util.TRUE.equals(autoGenerated.getValue());
    }

    private void addRelationFields(Map<String, EbodacEntity> ebodacEntityMap, Map<String, List<FieldDto>> relationFields) {
        for (Map.Entry<String, List<FieldDto>> entry : relationFields.entrySet()) {
            EbodacEntity entity = ebodacEntityMap.get(entry.getKey());
            for (FieldDto fieldDto : entry.getValue()) {
                MetadataDto relatedClass = fieldDto.getMetadata(Constants.MetadataKeys.RELATED_CLASS);
                if (relatedClass != null && !entity.getClassName().equals(relatedClass.getValue())) {
                    EbodacEntity relatedEntity = ebodacEntityMap.get(relatedClass.getValue());
                    for (EbodacEntityField relatedField : relatedEntity.getFields()) {
                        if (!relatedField.isRelationField()) {
                            entity.getFields().add(new EbodacEntityField(fieldDto.getId(), fieldDto.getBasic().getName(),
                                    fieldDto.getBasic().getDisplayName(), relatedField.getName(), relatedField.getDisplayName()));
                        }
                    }
                }
            }
        }
    }
}
